Install Git:
	Windows:	http://msysgit.github.io/ >> download >> run >> open Git\Git Bash (as command line)
	OSX:		http://git-scm.com/download/mac >> run >> ctrl+click open .pkg >> run installer
				>> Terminal
	check with eg. git --version

	git help		tutorials and workflows etc.


How did viewing a diff between two versions of a file help you see the bug that was introduced?

	Enables checking of each line were a modification has been made individually, rather than the entire body of code

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	Avoids the need for duplication where a mistake cannot be identified. Avoid re-writing code

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	pro: changes saved can reflect logical changes to the code, rather than changes based on time etc which may result in un-compilable code
	con: user discretion is required, and failing to commit can result in loss of work or duplication

How might using version control make you more confident to make changes that could break something?

	Allows for experimentation because there will always be a version to fall back to

Now that you have your workspace set up, what do you want to try using Git for?

	SQL/Python development projects



Useful extras:

	git config --global color.ui auto
		adds clour to UI

	git checkout <commitID>
		reset all files to time specified version was made

	git clone <URL>
		clone a Git repository into the pwd

	git log
		shows commit log for the present branch

	git log --graph --oneline
		shows single line including branching structure

	git diff <old commitID> <new commitID>
		compare two commits by line (+new, -old)

	git diff
		(no commitID) compares staging and pwd

	git checkout <commitID>
		change file in pwd to a specified commitID. Ensure that present work is reachable or it will be discarded!
		


confiure Git workspace:

	Mac OSX:

	download https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
	and https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh

	save as <>.bash and <>.sh respectively
	use mv <filename> <new_filename> to move both to home directory

	Copy following code into .bash_profile if exists, if not create file in home directory:

		# Enable tab completion
		source ~/git-completion.bash

		# colors!
		green="\[\033[0;32m\]"
		blue="\[\033[0;34m\]"
		purple="\[\033[0;35m\]"
		reset="\[\033[0m\]"

		# Change command prompt
		source ~/git-prompt.sh
		export GIT_PS1_SHOWDIRTYSTATE=1
		# '\u' adds the name of the current user to the prompt
		# '\$(__git_ps1)' adds git-related stuff
		# '\W' adds the name of the current directory
		export PS1="$purple\u$green\$(__git_ps1)$blue \W $ $reset"

	For Sublime Editor in default location add:

		export PATH=$PATH:/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin

	this enables editor starting from terminal.

	Restart the terminal after changes


	Windows:

	https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
	and
	https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh

	move both, same name. use mv while in home directory so you don't need to specify output path

	Create .bash_profile using mv .bash_profile while in home directory ( cd ~ )

	Copy above code into file.

	If Sublime is in C:/Program Files, add fllowing to .bash_profile:

		alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"

	then run in git_bash:

		git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
		git config --global push.default upstream
		git config --global merge.conflictstyle diff3

	restart git bash
